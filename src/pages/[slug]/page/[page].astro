---
import { getNodeByURI, getAllUris, settingsQuery } from "../../../lib/api";
import MainLayout from "../../../layouts/MainLayout.astro";
import Archive from "../../../components/templates/Archive.astro";

// Static rendering for all category/tag pages
export const prerender = true;

// Get the slug and page number from URL parameters
const { slug, page } = Astro.params;
const pageNumber = parseInt(page, 10);

// Get the data
const uri = `/${slug}/`;
const data = await getNodeByURI(uri);
const node = data.nodeByUri;

// Determine how many pages to generate at build time
export async function getStaticPaths() {
  // Get all URIs
  const uris = await getAllUris();
  const { allSettings } = await settingsQuery();
  const postsPerPage = allSettings.readingSettingsPostsPerPage || 10;
  
  // Filter for URIs that are specifically categories or tags
  // We need to distinguish them from posts that might have no slashes
  const taxonomyUris = [];
  
  for (const uri of uris) {
    const path = uri.params.uri;
    // Only consider top-level slugs (no slashes)
    if (!path.includes('/') && path !== '') {
      try {
        // Check if this URI resolves to a category or tag
        const data = await getNodeByURI(`/${path}/`);
        if (data.nodeByUri && ['Category', 'Tag'].includes(data.nodeByUri.__typename)) {
          taxonomyUris.push({
            slug: path
          });
        }
      } catch (error) {
        // Skip any errors in resolving
        continue;
      }
    }
  }
  
  // Generate paths for each taxonomy (up to 5 pages)
  // This limit is to avoid excessive pages at build time
  const maxPagesToGenerate = 5;
  
  const paths = [];
  
  for (const taxonomy of taxonomyUris) {
    for (let i = 2; i <= maxPagesToGenerate; i++) {
      paths.push({
        params: { 
          slug: taxonomy.slug,
          page: i.toString()
        }
      });
    }
  }
  
  return paths;
}

// If node not found or is not a Category/Tag, redirect to 404
if (!node || !['Category', 'Tag'].includes(node.__typename)) {
  return Astro.redirect('/404');
}

// Create page object for pagination component
const pageData = {
  currentPage: pageNumber,
  url: {
    prev: pageNumber > 2 ? `/${slug}/page/${pageNumber - 1}` : (pageNumber === 2 ? `/${slug}` : null),
    next: `/${slug}/page/${pageNumber + 1}`
  },
  lastPage: 10 // This is a placeholder, the actual value is determined in the Archive component
};

---

<MainLayout title={`${node.name} - Page ${pageNumber}`} description={`Page ${pageNumber} of posts in ${node.name}`}>
  <Archive node={node} page={pageData} />
</MainLayout>