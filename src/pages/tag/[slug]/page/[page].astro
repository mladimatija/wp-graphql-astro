---
import { getNodeByURI, getAllUris, settingsQuery } from "../../../../lib/api";
import MainLayout from "../../../../layouts/MainLayout.astro";
import Archive from "../../../../components/templates/Archive.astro";

// Static rendering for all tags
export const prerender = true;

// Get the tag slug and page number from URL parameters
const { slug, page } = Astro.params;
const pageNumber = parseInt(page, 10);

// Get the tag data
const uri = `/tag/${slug}/`;
const data = await getNodeByURI(uri);
const node = data.nodeByUri;

// Determine how many tag pages to generate at build time
export async function getStaticPaths() {
  // Get all tags
  const uris = await getAllUris();
  const { allSettings } = await settingsQuery();
  const postsPerPage = allSettings.readingSettingsPostsPerPage || 10;
  
  // Filter for tag URIs
  const tagUris = uris
    .filter(uri => uri.params.uri.startsWith('tag/'))
    .map(uri => ({
      slug: uri.params.uri.split('/')[1] // Extract the tag slug
    }));
  
  // Generate paths for each tag (up to 5 pages)
  // This limit is to avoid excessive pages at build time
  // Runtime rendering will handle any pages beyond this
  const maxPagesToGenerate = 5;
  
  const paths = [];
  
  for (const tag of tagUris) {
    for (let i = 2; i <= maxPagesToGenerate; i++) {
      paths.push({
        params: { 
          slug: tag.slug,
          page: i.toString()
        }
      });
    }
  }
  
  return paths;
}

// If node not found, redirect to 404
if (!node) {
  return Astro.redirect('/404');
}

// Create page object for pagination component
const pageData = {
  currentPage: pageNumber,
  url: {
    prev: pageNumber > 2 ? `/tag/${slug}/page/${pageNumber - 1}` : (pageNumber === 2 ? `/tag/${slug}` : null),
    next: `/tag/${slug}/page/${pageNumber + 1}`
  },
  lastPage: 10 // This is a placeholder, the actual value is determined in the Archive component
};

---

<MainLayout title={`${node.name} - Page ${pageNumber}`} description={`Page ${pageNumber} of posts in ${node.name} tag`}>
  <Archive node={node} page={pageData} />
</MainLayout>